
  return (
    <>
      <button
        id={`${modalBtnId}`}
        type="button"
        className={btnCls}
        data-hs-overlay={`#${formId}`}
      >
        Open modal
      </button>
      <div id={formId} className={`${modalCls} text-xs`}>
        <div className="hs-overlay-open:opacity-100 hs-overlay-open:duration-500 opacity-0 transition-all sm:max-w-lg sm:w-full m-3 sm:mx-auto ]">
          <div className="flex w-[700px] flex-col bg-white border shadow-sm rounded-xl pointer-events-auto dark:bg-gray-800 dark:border-gray-700 dark:shadow-slate-700/[.7]">
            <div className="flex justify-between items-center py-3 px-4 border-b dark:border-gray-700">
              <h3 className="font-bold text-gray-800 dark:text-white">
                { {{options.fieldItemName}} }
              </h3>
              <button
                type="button"
                id={`${modalCloseBtnId}`}
                onClick={(e) => onCancelForm(e)}
                className={modalBtnCloseCls}
              >
                <span className="sr-only">Close</span>
                <svg
                  className="flex-shrink-0 w-4 h-4"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M18 6 6 18" />
                  <path d="m6 6 12 12" />
                </svg>
              </button>
            </div>
            <div className="p-4 overflow-y-auto">
              <form className={"className"} ref={formRef}>
{% for field in schemaDef.fields %}
{% if field != schemaDef.pk and field != options.uploadField %}

                <FormRowValidation
                  validationErrors={validationErrors}
                  label="{{field|capitalize}}"
                  value={ {{field}} }
                  fieldname="{{field}}"
                  onChange={(e) => {
                    set{{field|capitalize}}(e.target.value)
                  }}
                  {% if field == options.fieldItemName %}
                  autofocus="yes"
                  {% endif %}
                />
{% endif %}

{% endfor %}              

{% if options.enableUpload %}                

                <FormRowImageValidation
                  validationErrors={validationErrors}
                  label="{{options.uploadField|capitalize}}"
                  onChange={(e) => set{{options.uploadField|capitalize}}File(e.target)}
                  fieldname="{{options.uploadField}}"
                  inputRef={ {{options.uploadField}}Ref}
                  imageUrl={ {{options.uploadField}}Url}
                  validImage={ {{options.uploadField}}Valid}
                />
{% endif %}
              </form>
            </div>
            <div className="flex justify-end items-center gap-x-2 py-3 px-4 border-t dark:border-gray-700">
              <button
                onClick={(e) => onCancelForm(e)}
                type="button"
                className={modalBtnFrmCloseCls}
              >
                Cancel
              </button>
              <button
                tabIndex={10}
                onClick={(e) => saveForm(e)}
                type="button"
                className={modalBtnFrmSaveCls}
              >
                Save changes
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  )